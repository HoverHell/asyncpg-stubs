from typing import Any, Generic, List, Optional, Tuple, TypeVar

from . import connresource, cursor
from .connection import Connection
from .protocol import Record
from .protocol.protocol import PreparedStatementState
from .types import Attribute, Type

_Record = TypeVar('_Record', bound=Record)

class PreparedStatement(connresource.ConnectionResource, Generic[_Record]):
    def __init__(
        self, connection: Connection, query: str, state: PreparedStatementState
    ) -> None: ...
    def get_query(self) -> str: ...
    def get_statusmsg(self) -> str: ...
    def get_parameters(self) -> Tuple[Type, ...]: ...
    def get_attributes(self) -> Tuple[Attribute, ...]: ...
    def cursor(
        self, *args: Any, prefetch: Optional[int] = ..., timeout: Optional[float] = ...
    ) -> cursor.CursorFactory[_Record]: ...
    async def explain(self, *args: Any, analyze: bool = ...) -> Any: ...
    async def fetch(
        self, *args: Any, timeout: Optional[float] = ...
    ) -> List[_Record]: ...
    async def fetchval(
        self, *args: Any, column: int = ..., timeout: Optional[float] = ...
    ) -> Any: ...
    async def fetchrow(
        self, *args: Any, timeout: Optional[float] = ...
    ) -> Optional[_Record]: ...
    def __del__(self) -> None: ...
