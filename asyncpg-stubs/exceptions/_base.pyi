from typing import Any, Optional

class PostgresMessageMeta(type):
    def __new__(metacls: Any, name: Any, bases: Any, dct: Any) -> Any: ...
    @classmethod
    def get_message_class_for_sqlstate(metacls: Any, code: str) -> Any: ...

class PostgresMessage:
    severity: Optional[Any]
    severity_en: Optional[Any]
    sqlstate: Optional[Any]
    message: Optional[Any]
    detail: Optional[Any]
    hint: Optional[Any]
    position: Optional[Any]
    internal_position: Optional[Any]
    internal_query: Optional[Any]
    context: Optional[Any]
    schema_name: Optional[Any]
    table_name: Optional[Any]
    column_name: Optional[Any]
    data_type_name: Optional[Any]
    constraint_name: Optional[Any]
    server_source_filename: Optional[Any]
    server_source_line: Optional[Any]
    server_source_function: Optional[Any]
    def as_dict(self) -> Any: ...

class PostgresError(PostgresMessage, Exception):
    @classmethod
    def new(cls, fields: Any, query: Optional[Any] = ...) -> Any: ...

class FatalPostgresError(PostgresError): ...
class UnknownPostgresError(FatalPostgresError): ...

class InterfaceMessage:
    detail: Any = ...
    hint: Any = ...
    def __init__(
        self, *, detail: Optional[Any] = ..., hint: Optional[Any] = ...
    ) -> None: ...

class InterfaceError(InterfaceMessage, Exception):
    def __init__(
        self, msg: Any, *, detail: Optional[Any] = ..., hint: Optional[Any] = ...
    ) -> None: ...

class DataError(InterfaceError, ValueError): ...

class InterfaceWarning(InterfaceMessage, UserWarning):
    def __init__(
        self, msg: Any, *, detail: Optional[Any] = ..., hint: Optional[Any] = ...
    ) -> None: ...

class InternalClientError(Exception): ...
class ProtocolError(InternalClientError): ...

class OutdatedSchemaCacheError(InternalClientError):
    schema_name: Any = ...
    data_type_name: Any = ...
    position: Any = ...
    def __init__(
        self,
        msg: Any,
        *,
        schema: Optional[Any] = ...,
        data_type: Optional[Any] = ...,
        position: Optional[Any] = ...,
    ) -> None: ...

class PostgresLogMessage(PostgresMessage):
    def __setattr__(self, name: Any, val: Any) -> None: ...
    @classmethod
    def new(cls, fields: Any, query: Optional[Any] = ...) -> Any: ...
